<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="1024" minHeight="768" 
			   creationComplete="application_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10"/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import font.CharManager;
			import font.CharRoot;
			import font.view.GlowFilterGroup;
			
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			
			import spark.components.supportClasses.GroupBase;
			import spark.events.IndexChangeEvent;
			
			private var charRoot:CharRoot;
			protected function application_creationCompleteHandler(event:FlexEvent):void
			{
				characterArea.text = CharManager.kCharOnly;
				
				var font:Array = Font.enumerateFonts(true);
				this.fontList.dataProvider = new ArrayCollection(font);
				this.fontList.selectedIndex = 0;
				
				charRoot = CharRoot.getInstance();
				
				var firstFont:Font = font[0] as Font;
				CharManager.getInstance().textFormat = new TextFormat(firstFont.fontName, 64, 0xFF0000);
				
				var bp:GroupBase = new GroupBase();
				bp.addChild(charRoot);
				layoutGroupView.addElement(bp);
				charRoot.rootView = layoutGroupView;
				
				charRoot.load();
				
				addFilterButton.dataProvider = ["Blur", "Drop Shadow"];
			}
			
			protected function fontList_changeHandler(event:IndexChangeEvent):void
			{
				var currFont:String = CharManager.getInstance().textFormat.font;
				var select:String = (fontList.selectedItem as Font).fontName;
				if(currFont != select)
				{
					CharManager.getInstance().textFormat.font = select;
					charRoot.load();
				}
			}
			
			protected function addFilterButton_itemClickHandler(event:MenuEvent):void
			{
				event.label;
				
				var gl:IVisualElement = new GlowFilterGroup();
				filterList.addElement(gl);
			}
			
			protected function updateCharacterButton_clickHandler(event:Event = null):void
			{
				CharManager.getInstance().characterSet = characterArea.text;
				charRoot.load();
			}
			
			protected function asciiButton_clickHandler(event:MouseEvent):void
			{
				characterArea.text = CharManager.kASCII;
				updateCharacterButton_clickHandler(null);
			}
			
			protected function neheButton_clickHandler(event:MouseEvent):void
			{
				characterArea.text = CharManager.kNEHE;
				updateCharacterButton_clickHandler(null);
			}
			
			protected function fontSizeStepper_changeHandler(event:Event):void
			{
				var currSize:int = int(CharManager.getInstance().textFormat.size);
				var select:int = fontSizeStepper.value;
				if(currSize != select)
				{
					CharManager.getInstance().textFormat.size = select;
					charRoot.load();
				}
			}
			
			protected function fontColorPicker_changeHandler(event:ColorPickerEvent):void
			{
				var currSize:uint = uint(CharManager.getInstance().textFormat.color);
				var select:uint = fontColorPicker.selectedColor;
				if(currSize != select)
				{
					CharManager.getInstance().textFormat.color = select;
					charRoot.load();
				}
			}
			
			protected function searchFontBtn_clickHandler(event:Event = null):void
			{
				var fontCollection:ArrayCollection = fontList.dataProvider as ArrayCollection;
				var search:String = searchFontInput.text;
				
				if(search.length < 1) fontCollection.filterFunction = null;
				else fontCollection.filterFunction = filterByFontName;
				
				fontCollection.refresh();
			}
			
			private function filterByFontName(item:Font):Boolean
			{
				var search:String = searchFontInput.text || "";
				if(search.length < 1) return false;
				search = search.toLocaleLowerCase();
				var fontName:String = item.fontName.toLocaleLowerCase();
				return fontName.search(search) != -1;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:BorderContainer width="100%" height="70" backgroundAlpha="1" backgroundColor="#EFEFEF" borderVisible="false">
		<s:HGroup width="100%" height="70" verticalAlign="middle" paddingLeft="5" paddingRight="5">
			<s:HGroup x="2" y="10" width="570" height="70" verticalAlign="middle">
				<s:Button id="loadButton" height="64" label="Load"/>
				<s:Button id="saveButton" height="64" label="Save"/>
				<s:Button id="exportButton" height="64" label="Export"/>
			</s:HGroup>
			<s:HGroup x="597" y="10" width="100%" height="70" gap="10" horizontalAlign="right"
					  verticalAlign="middle">
				<s:Label y="8" width="200" height="30" fontSize="20" text="User Name"
						 textAlign="right" verticalAlign="middle"/>
				<s:Button y="7" height="64" label="Reg"/>
				<s:Button height="64" label="Sign out"/>
			</s:HGroup>
			
		</s:HGroup>
		
	</s:BorderContainer>
	
	<s:HGroup width="100%" height="100%">
		<s:VGroup x="10" y="64" width="230" height="100%">
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
				<s:NumericStepper id="fontSizeStepper" y="-8" width="82" height="30" fontSize="18"
								  maximum="90" minimum="8" stepSize="1" value="64" change="fontSizeStepper_changeHandler(event)"/>
				<mx:ColorPicker width="30" height="30" id="fontColorPicker" change="fontColorPicker_changeHandler(event)"/>
			</s:HGroup>
			
			<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
				<s:TextInput width="100%" id="searchFontInput" change="searchFontBtn_clickHandler()"/>
				<s:Button id="searchFontBtn" width="40" height="26" label="GO" click="searchFontBtn_clickHandler(event)"/>
			</s:HGroup>
			
			<s:List id="fontList" width="100%" height="100%" horizontalScrollPolicy="off"
					itemRenderer="font.view.FontNameRenderer" change="fontList_changeHandler(event)"/>
		</s:VGroup>
		
		<s:Scroller x="218" y="64" width="100%" height="100%">
			
			<s:HGroup width="100%" height="100%" id="layoutGroupView">
			</s:HGroup>
		</s:Scroller>
		
		<s:VGroup x="764" y="64" width="280" height="100%" paddingRight="5">
			<mx:Accordion width="100%" height="100%" headerHeight="30" selectedIndex="2" creationPolicy="all">
				<s:NavigatorContent id="glyphContent" width="100%" height="100%" label="Glyph">
				</s:NavigatorContent>
				<s:NavigatorContent id="textureContent" width="100%" height="100%" label="Texture">
				</s:NavigatorContent>
				<s:NavigatorContent id="filtersContent" width="100%" height="100%" label="Filters">
					<s:layout>
						<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"/>
					</s:layout>
					<s:HGroup width="100%">
						<mx:PopUpMenuButton label="Add Filter" id="addFilterButton" itemClick="addFilterButton_itemClickHandler(event)"/>
						
					</s:HGroup>
					
					<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
						<s:VGroup id="filterList" width="100%" height="100%" />
					</s:Scroller>
					
				</s:NavigatorContent>
				<s:NavigatorContent id="charactersContent" width="100%" height="100%" label="Characters">
					<s:TextArea id="characterArea" x="10" y="10" width="253" height="241" fontSize="16"/>
					<s:Button x="10" y="259" height="30" label="ASCII" id="asciiButton" click="asciiButton_clickHandler(event)"/>
					<s:Button x="85" y="259" height="30" label="NEHE" id="neheButton" click="neheButton_clickHandler(event)"/>
					<s:Button x="193" y="259" height="30" label="Update" id="updateCharacterButton" click="updateCharacterButton_clickHandler(event)"/>
				</s:NavigatorContent>
			</mx:Accordion>
		</s:VGroup>
		
	</s:HGroup>
</s:Application>
